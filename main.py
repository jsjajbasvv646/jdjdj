#dev tlg /@devpyc
#dev tlg /xaz
import jwt
import hashlib
import logging
import asyncio
import httpx
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from random import  fnditools import reduce
import socket
logging.getLogger("httpx").t reduce
import socket
logging.getLogger("httpx").setLevel(logging.WARNING)

#dev tlg /@devp', 'd2', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', 78f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e, 'f1', 'f2', 'f3', c',',fd', 'fe', 'ff']
x = ['1', '01', '02', '03', '', 'fd', 'fe', 'ff']
x = ['1', '01', '02', '03', '', 'fd', 'fe', 'ff']
x = ['1', '01', '02', '03', '04', '05', '06',0f', '10', '11', '12', '13', '14', '15'd', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '', '65', '66', '67', '68', '69', '6a', , '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '7, ' '']

custom_packets =00620022a6308fb9db9ae061a1c5b3030464630305d4334e385a446412a6308fb9db9ae061a1c5b3030464630305d4334e385a446412a6308fb9db9ae061a1c5b3030464630305d4334e385a44641434b4520205b3030464630305d32024d454040b00113b801e71cd801d4d8d0ad03e00191db8dae03ed03900201d0020ad80221',
  00101f801911a8002fd98a8dd03900201d0020ad80221',
      b'060000006f08305d4334e385a44641434b4520205b303046463b3030464630305d4334e385a44641434b4520205b3030464630305d32024d454040b00113b801e71cd801d4d8d0ad03e00191db8dae03ea010a5a45522d49534b494e47f00101f801911a8002fd98a8dd03900201d0020ad80221',
          b'120000018d0822d2015b625d5b635d5b6161656430655d2d2057656c636f6d6520546f205b4646423733325d435b4646434135355d345b4646443936465d20425b4646453538365d4f5b4646454439435d545b4646463542315d20565b4646464243435d5b4646464243435d325b6637656435635d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f0ed8db7064a3d0a18efbca2efbcb2efbcb3e385a4efbcadeff9f7b103420c47524f56455350682e66616365626f6f6a520a4c68747470733a2f2f67726170682e66616365626f6f6a520a4c68747470733a2f2f67726170682e66616365626f6f6b2e636f6d2f7639653f77696474683d313630266861333534352f706963747572653f77696474683d313630266865696768743d313630100118017200',
              b'05000003121ee28094cd9ecd9fcd9ee29885efbcb6efbca5efbcaeefbcafefbcade385a41a9be061e1cea561b793e66080a5b00382011f08d1daf1eb0412054f75656973180420d487d4f0000382011f08d1daf1eb0412054f75656973180420d487d4f0000382011f08d1daf1eb0412054f75656973180420d487d4f0042a0808cc9d85f30101d001ada48aaf03e80101881a1e20229801db01a0014fc00101d001ada48aaf03e80101880203920208c205d628ae2db202aa02050801109c44aa0208080210ea3018c413aa0208080f10d836188827aa0205081710bd33aa0205082b10e432aa0205083910a070aa0205083d10c16faa02050849108439aa0205081810d836aa0205081a10d836aa0205081c10d836aa0205082010d836aa0205082210d836aa0205082110d836aa0205082310d836aa0205083110e432aa0205084110d836aa0205084d10e432aa0205081b10d836aa0205083410d836aa0205082810e432aa0205082910e432c202cd0112041a0201041a730848121301040506070203f1a802f4a802f2a802f3a8021a0b080110031886032086ac021a0b0802100418810420c59a081a0b0803100418da0620ecb4051a06080520f5ec021a0d08f1a802100318b80320def0041a0d08f2a802100318bc0520d0e90a1a0d08f3a802100318ef032092c9051a1208501201631a0b0863100e188f0420eeba0d1a1b0851120265661a09086520a6910128e7021a08086620822d289e05221f121d65ed0e890ed9049103f503ad02f90abd05e907a1068507cd08950ab109d802a6a38daf03ea020410011801f202080885cab5ee01105c8a0300920300980398e0b3af0ba20319efbca334e385a4eaa884e385a4efbcb4efbca5efbca1efbcada80368b00301c2030a081c100f180320052801e203014fea03003a011a403e50056801721e313733303239333438313635343436323834305f6c646a72387477723378880180909beaf3d18fd919a20100b001e201ea010449444331fa011e313733303239333438313635343436363239355f6f747735637831756c6d050000031e0121ee28094cd9ecd9fcd9ee29885efbcb6efbca5efbcaeefbcafefbcade385a41a024d4520ebdd88b90628363087cbd1303832421880c38566949be061e1cea561b793e66080a89763e5bfce64480150d60158991468b7db8dae037a05ab93c5b00382011f08d1daf1eb0412054f75656973180420d487d4f0042a0808cc9d85f304100392010b0107090a0b12191a1e20229801db01a0014fc00101d001ada48aaf03e80101880203920208c205d628ae2db202aa02050801109c44aa02100803aa0205082b10e432aa05081810d836aa0205081a10d836aa0205081c10d6aaaa05082310d836aa0205083110e432aa0205084110d836a6aa0205082310d836aa0205083110e432aa0205084110d836a6aa0205082310d836aa0205083110e432aa0205084110d836a6aa0205082310d836aa0205083110e432aa0205084110d836aa0205084d1434320205082910e432c2f4a802f2a802f3a8021a0b080110031886032086a203f1a802f4a802f2a802f3a8021a0b080110031886032086a203f1a802f4a802f2a802f3a8021a0b080110031886032086ac021a0b0802100418810420c59a081a0b0803100418da0620ecb4051a06080520f5ec021a0d08f1a802100318b80320def0041a0d08f2a802100318bc0520d0e90a1a0d08f3a802100318ef032092c9051a1208501201631a0b0863100e188f0420eeba0d1a1b0851120265661a09086520a6910128e7021a08086620822d289e05221f121d65ed0e890ed9049103f503ad02f90abd05e907a1068507cd08950ab109d802a6a38daf03ea020410011801f202080885cab5ee01105c8a0300920300980398e0b3af0ba20319efbca334e385a4eaa884e385a4efbcb4efbca5efbca1efbcada80368b00301c2030a081c100f180320052801e203014fea03003a011a403e50056801721e313733303239333438313635343436323834305f6c646a72387477723378880180909beaf3d18fd919a20100b001e201ea010449444331fa011e313733303239333438313635343436363239355f6f747735637831756c6d',
                  b'050000036c081221e29a91e29a91e29a91e29a91e29a91e29a91e29a91e29a91e29a91e29a91e28c9a1a024d4520b893b5b5062805308fcbd13038324218c091e6608096a361c09ae06180a89763c0b5ce6480c38566480150c90158e80782011808b3daf1eb04180120b387d4f0042a0808c49d85f304100392010c010307090a0b1216191a1e209801c901c00101e8010188020b9202029e11aa020a08011090351880642002aa0208080f10e43218904eaa0205082b10bd32aa0205080210e432aa0205081810e432aa0205081a10e432aa0205081c10e432aa0205082010e432aa0205082210e432aa0205082110e432aa0205081710e432aa0205082310e432aa02084831e432aa0205084910d8360202082810e432aa0205082910e432c2022712031a01001a0f51120265662200ea020434e385a45445414de385a4424f54001a024d4520cad}12104334e385a45445414de385a4424f54001a024d4520cad}12104334e385a45445414de385a4424f54001a024d4520cad}12104334e385a45445414de385a4424f54001a024d4520cad}12104334e385a45445414de385a4424f54001a024d4520c493b5b506280130838566c09ae0614801c0c101e801018802089202029603aa0208080110e43218807daa0101e801018802089202029603aa0208080110e43218807daa0101e801018802089202029603aa0208080110e43218807daa0209080f10e43218f0ab01aa0205080210e432aa0205081810e432aa0205081a10e432aa0205081c10e432aa0205082010e432aa0205082210e432aa0205082110e432aa0205081710e432aa0205082310e432aa0205082b10e432aa0205083110e432aa0205083910e432aa0205083d10e432aa0205084110e432aa0205084910e432aa0205084d10e432aa0205081b10e432aa0205083410e432aa0205082810e432aa0205082910e432c2022812041a0201041a0f0848120b0104050607f1a802f4a8021a0508501201631a060851120265662200ea0204100118018a03009203003a0101400150016801721e313732323633323633323338363436363831365f377466376a616f627736880180e0ae83d2d785a019a20100b001e201ea010449444332fa011e313732323633323633323338363437303439315f62713876386c38686276'
     ]
     #dev tlg /@devpyc
     #dev tlg /xaz

     def encrypt_packet(plain_text):
         plain_text = bytes.fromhex(plain_text)
             key = bytes([101, 116, 33, 120, 72, 83, 97, 119, 82, 94, 37, 56, 74, 50, 83, 53])
                 iv = bytes([84, 76, 82, 118, 120, 100, 114, 114, 117, 51, 37, 80, 85, 113, 65, 54])
                     cipher = AES.new(key, AES.MODE_CBC, iv)
                         cipher_text = cipher.encrypt(pad(plain_text, AES.block_size))
                             return cipher_text.hex()

                             def decrypt_packet(packet):
                                 packet = bytes.fromhex(packet)
                                     key = bytes([101, 116, 33, 120, 72, 83, 97, 119, 82, 94, 37, 56, 74, 50, 83, 53])
                                         iv = bytes([84, 76, 82, 118, 120, 100, 114, 114, 117, 51, 37, 80, 85, 113, 65, 54])
                                             cipher = AES.new(key, AES.MODE_CBC, iv)
                                                 plain_text = unpad(cipher.decrypt(packet), AES.block_size)
                                                     return plain_text.hex()
                                                     #dev tlg /@devpyc
                                                     #dev tlg /xaz
                                                     def Encrypt_ID(x):
                                                         x = int(x)
                                                             x = x / 128
                                                                 if x > 128:
                                                                         x = x / 128
                                                                                 if x > 128:
                                                                                             x = x / 128
                                                                                                         if x > 128:
                                                                                                                         x = x / 128
                                                                                                                                         strx = int(x)
                                                                                                                                                         y = (x - int(strx)) * 128
                                                                                                                                                                         stry = str(int(y))
                                                                                                                                                                                         z = (y - int(stry)) * 128
                                                                                                                                                                                                         strz = str(int(z))
                                                                                                                                                                                                                         n = (z - int(strz)) * 128
                                                                                                                                                                                                                                         strn = str(int(n))
                                                                                                                                                                                                                                                         m = (n - int(strn)) * 128
                                                                                                                                                                                                                                                                         return dec[int(m)] + dec[int(n)] + dec[int(z)] + dec[int(y)] + x[int(x)]
                                                                                                                                                                                                                                                                                     else:
                                                                                                                                                                                                                                                                                                     strx = int(x)
                                                                                                                                                                                                                                                                                                                     y = (x - int(strx)) * 128
                                                                                                                                                                                                                                                                                                                                     stry = str(int(y))
                                                                                                                                                                                                                                                                                                                                                     z = (y - int(stry)) * 128
                                                                                                                                                                                                                                                                                                                                                                     strz = str(int(z))
                                                                                                                                                                                                                                                                                                                                                                                     n = (z - int(strz)) * 128
                                                                                                                                                                                                                                                                                                                                                                                                     strn = str(int(n))
                                                                                                                                                                                                                                                                                                                                                                                                                     return dec[int(n)] + dec[int(z)] + dec[int(y)] + x[int(x)]
                                                                                                                                                                                                                                                                                                                                                                                                                     #dev tlg /@devpyc
                                                                                                                                                                                                                                                                                                                                                                                                                     #dev tlg /xaz
                                                                                                                                                                                                                                                                                                                                                                                                                     def decode_and_reencrypt_jwt(token):
                                                                                                                                                                                                                                                                                                                                                                                                                         try:
                                                                                                                                                                                                                                                                                                                                                                                                                                 decoded = jwt.decode(token, options={"verify_signature"ed['signature_md5'] = newncode('utf-8').hex()
                                                                                                                                                                                                                                                                                                                                                                                                                                         encrypted_signature = hasht()
                                                                                                                                                                                                                                                                                                                                                                                                                                                 decoded[encrypted_token="Hjw56")
                                                                                                                                                                                                                                                                                                                                                                                                                                                         return re_encryptg.error(f"Error decopyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #dev tlg /@devpyng JWT: {e}")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 return None
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #dev tlg /@devpyc
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #dev tlg /xaz(def _mb * 1024 * 1024)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #et_atync(token, id, packe , atf mpt):
while True:
try:
if mpt):
while True:
try:
if mpt):
while True:
try:
if 1 <= attempt <= 5:
modified_packet = custom_packets[attempt - 1]
else:
modified_packet = packet

url = 'https://clientbp.commoe.ggbs = ox.com/RequestAddingFriend'
                 headers = {
                                 'ReleaseVersion': 'OB48',
                                  form-urlencoded',
                                                  'X-GA': 'v1 1',
                                                                    'Content-LenUser-Agent1QD'Duild/QKQ1.190825.002)',
                                                                                    'Host': 'clientbp.ggblueshark.co,
                                                                                                    'Host': 'clientbp.ggblueshark.co,
                                                                                                                    'Host': 'clientbp.ggblueshark.co,
                                                                                                                                    'Host': 'clientbp.ggblueshark.co,
                                                                                                                                                    'Host': 'clientbp.ggblueshark.co,
                                                                                                                                                                    'Host': 'clientbp.ggblueshark.com',
                                                                                                                                                                                c   '-Encoding': 'gzip'
      ie   verify=False, timeout=10.0) as client:
                      apialse, timeout=10.0) as client:
                                      apialse, timeout=10.0) as client:
                                                      api_response = await client.post(url, headers=headers, data=modified_packet)
                                                                      if api_response.status_code == 401:
                                                                                          logging.error(f"Unauthorized: Check your token or authentication method.")
                                                                                                              continue
                                                                                                              
                                                                                                                          try:
                                                                                                                                          client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                                                                                                                                                          client_socket.connect(('98.98.162.83', 39698))
                                                                                                                                                                          client_socket.sendall(modified_packet)
                                                                                                                                                                                          client_socket.close()
                                                                                                                                                                                                          logging.info(f"تم إرسال الباكج بنجاح عبر socket إلى الخادم.")
                                                                                                                                                                                                                      except Exception as e:
                                                                                                                                                                                                                                      logging.error(f"فشل إرسال الباكج عبر socket: {e}")
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                  logging.info(f"تمت العملية بنجاح! التوكن: {token[:10]}... جزء من الباكج: {modified_packet[:10].hex()}...")
                                                                                                                                                                                                                                                              return api_response.status_code
                                                                                                                                                                                                                                                                      except Exception as e:
                                                                                                                                                                                                                                                                                  logging.error(f"Error: {e}. Retrying...")
                                                                                                                                                                                                                                                                                  #dev tlg /@devpyc
                                                                                                                                                                                                                                                                                  #dev tlg /xaz
                                                                                                                                                                                                                                                                                  def xaz1():
                                                                                                                                                                                                                                                                                      def is_prime(n):
                                                                                                                                                                                                                                                                                              if n < 2:
                                                                                                                                                                                                                                                                                                          return False
                                                                                                                                                                                                                                                                                                                  for i in range(2, int(sqrt(n)) + 1):
                                                                                                                                                                                                                                                                                                                              if n % i == 0:
                                                                                                                                                                                                                                                                                                                                              return False
        return True

    prime = randint(1000, 10000)
        while not is_prime(prime):
                prime = randint(1000, 10000)
                    return prime

def xaz2():
    prime = xaz1()
        return factorial(prime)
        #dev tlg /@devpyc
        #dev tlg /xaz
def xaz3():
    primes = [xaz1() for _ in range(10)]
        lcm = reduce(lambda a, b: a * b // gcd(a, b), primes)
            return lcm

            def xaz4(token):
                def complex_operation(data):
                        data = list(data)
        for i in range(len(data)):
                    if i % 2 == 0:
                data[i] = chr(ord(data[i]) + 1)
            else:
                            data[i] = chr(ord(data[i]) - 1)
        return ''.join(data)

    modified_token = complex_operation(token)
        for _ in range(10):
        modified_token = hashlib.sha256(modified_token.encode('utf-8')).hexdigest()
            return token
#dev tlg /@devpyc
#dev tlg /xaz
async def main():
    while True:
            try:
            token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            user_id = 2307675461

            re_encrypted_token = decode_and_reen:
y               logging.info("تم إعادة تشd_token:
                logging.info("تم إعادة تشفير التوكن بنجاح!")

            packet_1mb = create_packet(1)
            packet_2mb = create_packet(2)
                        packet_3mb = create_packet(3)
            packet_4mb = create_packet(4)

            tasks = []
            for attempt in range(1, 6):
                            tasks.append(send_packet_async(re_encrypted_token, user_id, packet_1mb, attempt))

            tasks.extend([
                send_packet_async(re_encrypted_token, user_id, packet_1mb, 6),
                send_packet_async(re_encrypted_token, user_id, packet_2mb, 7),
                send_packet_async(re_encrypted_token, user_id, packet_3mb, 8),
                send_packet_async(re_encrypted_token, user_id, packet_4mb, 9)
])
#dev tlg /@devpyc
#dev tlg /xaz
            await asyncio.gather(*tasks)
#dev tlg /@devpyc
#dev tlg /xaz
            prime_factorial = xaz2()
            lcm_result = xaz3()
            final_token = xaz4(re_encrypted_token)
            logging.info(f"Factorial of a random prime: {prime_factorial}")
            logging.info(f"LCM of 10 random primes: {lcm_result}")
            logging.info(f"Final token after xaz4: {final_token}")
except Exception as e:
            logging.error(f"Error in main loop: {e}. Restarting...")

if __name__ == "__main__":
    asyncio.run(main())
    #dev tlg /@devpyc
#dev tlg /xaz
